{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DAFDA \u00b6 TL;DR DAFDA is a small Kafka client library for .NET. Motivation \u00b6 The motivation behind the API Guidelines is to define standards or \"best practices\" in order to: design robust and long-lasting APIs of high quality design APIs that are easy to understand and use have a consistent API \"look and feel\" across the board facilitate APIs as a Product Status \u00b6 The library is developed in the open and the current release status is: NOT to be considered as released! Versioning \u00b6 When released SemVer will be used as the versioning scheme.","title":"Introduction"},{"location":"#dafda","text":"TL;DR DAFDA is a small Kafka client library for .NET.","title":"DAFDA"},{"location":"#motivation","text":"The motivation behind the API Guidelines is to define standards or \"best practices\" in order to: design robust and long-lasting APIs of high quality design APIs that are easy to understand and use have a consistent API \"look and feel\" across the board facilitate APIs as a Product","title":"Motivation"},{"location":"#status","text":"The library is developed in the open and the current release status is: NOT to be considered as released!","title":"Status"},{"location":"#versioning","text":"When released SemVer will be used as the versioning scheme.","title":"Versioning"},{"location":"configuration/","text":"Configuration \u00b6 Defaults \u00b6 Dafda relies on the default of Confluent.Kafka , which in turn relies on the default from librdkafka . Basic \u00b6 // configure messaging: consumer services . AddConsumer ( options => { // configuration settings options . WithBootstrapServers ( \"http://localhost:9092\" ); options . WithGroupId ( \"consumer-group-id\" ); // register message handlers ... }); Environment \u00b6 Consider the following environment variables: Name Value DEFAULT_KAFKA_BOOTSTRAP_SERVERS https://default.kafka.confluent.net:9092 SAMPLE_KAFKA_GROUP_ID sample-group-id The following: public class Startup { public Startup ( IConfiguration configuration ) { Configuration = configuration ; } public IConfiguration Configuration { get ; } // configure messaging: consumer services . AddConsumer ( options => { // configuration settings options . WithConfigurationSource ( Configuration ); options . WithEnvironmentStyle ( \"DEFAULT_KAFKA\" ); options . WithEnvironmentStyle ( \"SAMPLE_KAFKA\" ); // register message handlers ... }); } will take all environment variables starting with either DEFAULT_KAFKA_ or SAMPLE_KAFKA_ and put them into the configuration used by Consumer.","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#defaults","text":"Dafda relies on the default of Confluent.Kafka , which in turn relies on the default from librdkafka .","title":"Defaults"},{"location":"configuration/#basic","text":"// configure messaging: consumer services . AddConsumer ( options => { // configuration settings options . WithBootstrapServers ( \"http://localhost:9092\" ); options . WithGroupId ( \"consumer-group-id\" ); // register message handlers ... });","title":"Basic"},{"location":"configuration/#environment","text":"Consider the following environment variables: Name Value DEFAULT_KAFKA_BOOTSTRAP_SERVERS https://default.kafka.confluent.net:9092 SAMPLE_KAFKA_GROUP_ID sample-group-id The following: public class Startup { public Startup ( IConfiguration configuration ) { Configuration = configuration ; } public IConfiguration Configuration { get ; } // configure messaging: consumer services . AddConsumer ( options => { // configuration settings options . WithConfigurationSource ( Configuration ); options . WithEnvironmentStyle ( \"DEFAULT_KAFKA\" ); options . WithEnvironmentStyle ( \"SAMPLE_KAFKA\" ); // register message handlers ... }); } will take all environment variables starting with either DEFAULT_KAFKA_ or SAMPLE_KAFKA_ and put them into the configuration used by Consumer.","title":"Environment"},{"location":"consumer/","text":"Consumer \u00b6 Add Kafka consumer configuration and message handlers in Startup 's ConfigureServices() : public class Startup { ... // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices ( IServiceCollection services ) { // configure messaging: consumer services . AddConsumer ( options => { // configuration settings options . WithBootstrapServers ( \"http://localhost:9092\" ); options . WithGroupId ( \"consumer-group-id\" ); // register message handlers options . RegisterMessageHandler < Test , TestHandler >( \"test-topic\" , \"test-event\" ); }); } } Create a POCO representation of the Kafka message: public class Test { public string AggregateId { get ; set ; } } Create a message handler: public class TestHandler : IMessageHandler < Test > { private readonly ILogger < TestHandler > _logger ; public TestHandler ( ILogger < TestHandler > logger ) { _logger = logger ; } public Task Handle ( Test message ) { _logger . LogInformation ( @\"Handled: {@Message}\" , message ); return Task . CompletedTask ; } }","title":"Consumer"},{"location":"consumer/#consumer","text":"Add Kafka consumer configuration and message handlers in Startup 's ConfigureServices() : public class Startup { ... // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices ( IServiceCollection services ) { // configure messaging: consumer services . AddConsumer ( options => { // configuration settings options . WithBootstrapServers ( \"http://localhost:9092\" ); options . WithGroupId ( \"consumer-group-id\" ); // register message handlers options . RegisterMessageHandler < Test , TestHandler >( \"test-topic\" , \"test-event\" ); }); } } Create a POCO representation of the Kafka message: public class Test { public string AggregateId { get ; set ; } } Create a message handler: public class TestHandler : IMessageHandler < Test > { private readonly ILogger < TestHandler > _logger ; public TestHandler ( ILogger < TestHandler > logger ) { _logger = logger ; } public Task Handle ( Test message ) { _logger . LogInformation ( @\"Handled: {@Message}\" , message ); return Task . CompletedTask ; } }","title":"Consumer"},{"location":"contributions/","text":"Contributions \u00b6 When released, contributions are welcome through opening issues on GitHub or sending Pull Requests.","title":"Contributions"},{"location":"contributions/#contributions","text":"When released, contributions are welcome through opening issues on GitHub or sending Pull Requests.","title":"Contributions"},{"location":"examples/","text":"Examples \u00b6 Here is some incorrect Markdown. I am adding this here . Here is some more text that I am removing text. And here is even more text that I am adding. Paragraph was deleted and replaced with some spaces. Spaces were removed and a paragraph was added. And here is a comment on some text This works quite well. I just wanted to comment on it. . Substitutions is are great! General block handling. test remove test remove test remove test remove test remove test add test add test add test add test add H 2 O H this is a test Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Note this is a test public void readonly static public static readonly string Name = \"NoName\" ; \"\"\"Some file.\"\"\" import foo.bar import boo.baz import foo.bar.baz import foo.bar \u2122 \u00a9 \u00ae \u2105 \u00b1 \u2192 \u2190 \u2194 \u2260 \u00bc \u00be 1 st 2 nd 3 rd \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Seealso Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Tldr Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Todo Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Hint Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Important Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Check Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Done Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Help Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Faq Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Caution Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Attention Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Fail Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Missing Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Error Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Snippet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Cite Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Examples"},{"location":"examples/#examples","text":"Here is some incorrect Markdown. I am adding this here . Here is some more text that I am removing text. And here is even more text that I am adding. Paragraph was deleted and replaced with some spaces. Spaces were removed and a paragraph was added. And here is a comment on some text This works quite well. I just wanted to comment on it. . Substitutions is are great! General block handling. test remove test remove test remove test remove test remove test add test add test add test add test add H 2 O H this is a test Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Note this is a test public void readonly static public static readonly string Name = \"NoName\" ; \"\"\"Some file.\"\"\" import foo.bar import boo.baz import foo.bar.baz import foo.bar \u2122 \u00a9 \u00ae \u2105 \u00b1 \u2192 \u2190 \u2194 \u2260 \u00bc \u00be 1 st 2 nd 3 rd \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Seealso Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Tldr Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Todo Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Hint Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Important Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Check Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Done Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Help Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Faq Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Caution Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Attention Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Fail Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Missing Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Error Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Snippet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Cite Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Examples"},{"location":"installation/","text":"Installation \u00b6 The library is available on nuget.org and can be installed in several ways: Go to package manager console and run the following: install-package dafda Or... In a terminal/console window navigate to the project folder and run the following dotnet cli command: dotnet add package dafda Or...whatever you prefer.","title":"Installation"},{"location":"installation/#installation","text":"The library is available on nuget.org and can be installed in several ways: Go to package manager console and run the following: install-package dafda Or... In a terminal/console window navigate to the project folder and run the following dotnet cli command: dotnet add package dafda Or...whatever you prefer.","title":"Installation"},{"location":"outbox/","text":"Outbox \u00b6 Add Kafka producer configuration and outgoing messages: public class Startup { ... // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices ( IServiceCollection services ) { // configure messaging: producer services . AddProducer ( options => { // configuration settings options . WithBootstrapServers ( \"http://localhost:9092\" ); // register outgoing messages (includes outbox messages) options . Register < Test >( \"test-topic\" , \"test-event\" , @event => @event . AggregateId ); // include outbox (polling publisher) options . AddOutbox ( outbox => { outbox . WithOutboxMessageRepository < OutboxMessageRepository >(); outbox . WithOutboxPublisher ( op => { op . WithUnitOfWorkFactory < OutboxUnitOfWorkFactory >(); }); }); }); // configure DbContext services . AddEntityFrameworkNpgsql () . AddDbContext < SampleDbContext >( options => options . UseNpgsql ( connectionString )); } } To enable persistence add a DbContext and configure the OutboxMessage model: public class SampleDbContext : DbContext { public SampleDbContext ( DbContextOptions options ) : base ( options ) { } public DbSet < OutboxMessage > OutboxMessages { get ; set ; } protected override void OnModelCreating ( ModelBuilder modelBuilder ) { base . OnModelCreating ( modelBuilder ); ... modelBuilder . Entity < OutboxMessage >( cfg => { cfg . ToTable ( \"OutboxMessage\" , \"outbox\" ); cfg . HasKey ( x => x . MessageId ); cfg . Property ( x => x . MessageId ); cfg . Property ( x => x . CorrelationId ); cfg . Property ( x => x . Topic ); cfg . Property ( x => x . Key ); cfg . Property ( x => x . Type ); cfg . Property ( x => x . Format ); cfg . Property ( x => x . Data ); cfg . Property ( x => x . OccurredOnUtc ); cfg . Property ( x => x . ProcessedUtc ); }); } and run the following Postgresql : CREATE SCHEMA IF NOT EXISTS outbox ; CREATE TABLE outbox . \"OutboxMessage\" ( \"MessageId\" uuid NOT NULL , \"CorrelationId\" varchar ( 255 ) NOT NULL , \"Topic\" varchar ( 255 ) NOT NULL , \"Key\" varchar ( 255 ) NOT NULL , \"Type\" varchar ( 255 ) NOT NULL , \"Format\" varchar ( 255 ) NOT NULL , \"Data\" text NOT NULL , \"OccurredOnUtc\" timestamp NOT NULL , \"ProcessedUtc\" timestamp NULL , CONSTRAINT domainevent_pk PRIMARY KEY ( \"MessageId\" ) ); CREATE INDEX domainevent_processedutc_idx ON outbox . \"OutboxMessage\" ( \"ProcessedUtc\" NULLS FIRST ); CREATE INDEX domainevent_occurredonutc_idx ON outbox . \"OutboxMessage\" ( \"OccurredOnUtc\" ASC ); and implement the IOutboxMessageRepository : public class OutboxMessageRepository : IOutboxMessageRepository { private readonly SampleDbContext _dbContext ; public OutboxMessageRepository ( SampleDbContext dbContext ) { _dbContext = dbContext ; } public async Task Add ( IEnumerable < OutboxMessage > domainEvents ) { await _dbContext . OutboxMessages . AddRangeAsync ( domainEvents ); } } To use the polling publisher implement the IOutboxUnitOfWorkFactory interface: public class OutboxUnitOfWorkFactory : IOutboxUnitOfWorkFactory { private readonly IServiceScopeFactory _serviceScopeFactory ; public OutboxUnitOfWorkFactory ( IServiceScopeFactory serviceScopeFactory ) { _serviceScopeFactory = serviceScopeFactory ; } public IOutboxUnitOfWork Begin () { var serviceScope = _serviceScopeFactory . CreateScope (); var dbContext = serviceScope . ServiceProvider . GetRequiredService < SampleDbContext >(); var transaction = dbContext . Database . BeginTransaction (); return new OutboxUnitOfWork ( serviceScope , dbContext , transaction ); } private class OutboxUnitOfWork : IOutboxUnitOfWork { private readonly IServiceScope _serviceScope ; private readonly SampleDbContext _dbContext ; private readonly IDbContextTransaction _transaction ; public OutboxUnitOfWork ( IServiceScope serviceScope , SampleDbContext dbContext , IDbContextTransaction transaction ) { _serviceScope = serviceScope ; _dbContext = dbContext ; _transaction = transaction ; } public async Task < ICollection < OutboxMessage >> GetAllUnpublishedMessages ( CancellationToken stoppingToken ) { return await _dbContext . OutboxMessages . Where ( x => x . ProcessedUtc == null ) . ToListAsync ( stoppingToken ); } public async Task Commit ( CancellationToken stoppingToken ) { await _dbContext . SaveChangesAsync ( stoppingToken ); _transaction . Commit (); } public void Dispose () { _transaction ?. Dispose (); _dbContext ?. Dispose (); _serviceScope ?. Dispose (); } } } Take a dependency on IOutbox and call the Enqueue method: public class Service { private readonly IOutbox _outbox ; public TestCommandHandler ( IOutbox outbox ) { _outbox = outbox ; } public async Task Handle ( TestCommand command ) { ... await _outbox . Enqueue ( new [] { new Test { AggregateId = \"aggregate-id\" }}); ... } }","title":"Outbox"},{"location":"outbox/#outbox","text":"Add Kafka producer configuration and outgoing messages: public class Startup { ... // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices ( IServiceCollection services ) { // configure messaging: producer services . AddProducer ( options => { // configuration settings options . WithBootstrapServers ( \"http://localhost:9092\" ); // register outgoing messages (includes outbox messages) options . Register < Test >( \"test-topic\" , \"test-event\" , @event => @event . AggregateId ); // include outbox (polling publisher) options . AddOutbox ( outbox => { outbox . WithOutboxMessageRepository < OutboxMessageRepository >(); outbox . WithOutboxPublisher ( op => { op . WithUnitOfWorkFactory < OutboxUnitOfWorkFactory >(); }); }); }); // configure DbContext services . AddEntityFrameworkNpgsql () . AddDbContext < SampleDbContext >( options => options . UseNpgsql ( connectionString )); } } To enable persistence add a DbContext and configure the OutboxMessage model: public class SampleDbContext : DbContext { public SampleDbContext ( DbContextOptions options ) : base ( options ) { } public DbSet < OutboxMessage > OutboxMessages { get ; set ; } protected override void OnModelCreating ( ModelBuilder modelBuilder ) { base . OnModelCreating ( modelBuilder ); ... modelBuilder . Entity < OutboxMessage >( cfg => { cfg . ToTable ( \"OutboxMessage\" , \"outbox\" ); cfg . HasKey ( x => x . MessageId ); cfg . Property ( x => x . MessageId ); cfg . Property ( x => x . CorrelationId ); cfg . Property ( x => x . Topic ); cfg . Property ( x => x . Key ); cfg . Property ( x => x . Type ); cfg . Property ( x => x . Format ); cfg . Property ( x => x . Data ); cfg . Property ( x => x . OccurredOnUtc ); cfg . Property ( x => x . ProcessedUtc ); }); } and run the following Postgresql : CREATE SCHEMA IF NOT EXISTS outbox ; CREATE TABLE outbox . \"OutboxMessage\" ( \"MessageId\" uuid NOT NULL , \"CorrelationId\" varchar ( 255 ) NOT NULL , \"Topic\" varchar ( 255 ) NOT NULL , \"Key\" varchar ( 255 ) NOT NULL , \"Type\" varchar ( 255 ) NOT NULL , \"Format\" varchar ( 255 ) NOT NULL , \"Data\" text NOT NULL , \"OccurredOnUtc\" timestamp NOT NULL , \"ProcessedUtc\" timestamp NULL , CONSTRAINT domainevent_pk PRIMARY KEY ( \"MessageId\" ) ); CREATE INDEX domainevent_processedutc_idx ON outbox . \"OutboxMessage\" ( \"ProcessedUtc\" NULLS FIRST ); CREATE INDEX domainevent_occurredonutc_idx ON outbox . \"OutboxMessage\" ( \"OccurredOnUtc\" ASC ); and implement the IOutboxMessageRepository : public class OutboxMessageRepository : IOutboxMessageRepository { private readonly SampleDbContext _dbContext ; public OutboxMessageRepository ( SampleDbContext dbContext ) { _dbContext = dbContext ; } public async Task Add ( IEnumerable < OutboxMessage > domainEvents ) { await _dbContext . OutboxMessages . AddRangeAsync ( domainEvents ); } } To use the polling publisher implement the IOutboxUnitOfWorkFactory interface: public class OutboxUnitOfWorkFactory : IOutboxUnitOfWorkFactory { private readonly IServiceScopeFactory _serviceScopeFactory ; public OutboxUnitOfWorkFactory ( IServiceScopeFactory serviceScopeFactory ) { _serviceScopeFactory = serviceScopeFactory ; } public IOutboxUnitOfWork Begin () { var serviceScope = _serviceScopeFactory . CreateScope (); var dbContext = serviceScope . ServiceProvider . GetRequiredService < SampleDbContext >(); var transaction = dbContext . Database . BeginTransaction (); return new OutboxUnitOfWork ( serviceScope , dbContext , transaction ); } private class OutboxUnitOfWork : IOutboxUnitOfWork { private readonly IServiceScope _serviceScope ; private readonly SampleDbContext _dbContext ; private readonly IDbContextTransaction _transaction ; public OutboxUnitOfWork ( IServiceScope serviceScope , SampleDbContext dbContext , IDbContextTransaction transaction ) { _serviceScope = serviceScope ; _dbContext = dbContext ; _transaction = transaction ; } public async Task < ICollection < OutboxMessage >> GetAllUnpublishedMessages ( CancellationToken stoppingToken ) { return await _dbContext . OutboxMessages . Where ( x => x . ProcessedUtc == null ) . ToListAsync ( stoppingToken ); } public async Task Commit ( CancellationToken stoppingToken ) { await _dbContext . SaveChangesAsync ( stoppingToken ); _transaction . Commit (); } public void Dispose () { _transaction ?. Dispose (); _dbContext ?. Dispose (); _serviceScope ?. Dispose (); } } } Take a dependency on IOutbox and call the Enqueue method: public class Service { private readonly IOutbox _outbox ; public TestCommandHandler ( IOutbox outbox ) { _outbox = outbox ; } public async Task Handle ( TestCommand command ) { ... await _outbox . Enqueue ( new [] { new Test { AggregateId = \"aggregate-id\" }}); ... } }","title":"Outbox"},{"location":"producer/","text":"Producer \u00b6 Add Kafka producer configuration and outgoing messages: public class Startup { ... // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices ( IServiceCollection services ) { // configure messaging: producer services . AddProducer ( options => { // configuration settings options . WithBootstrapServers ( \"http://localhost:9092\" ); // register outgoing messages (includes outbox messages) options . Register < Test >( \"test-topic\" , \"test-event\" , @event => @event . AggregateId ); }); } } Create a POCO representation of the Kafka message: public class Test { public string AggregateId { get ; set ; } } Take a dependency on IProducer and call the Produce method: public class Service { private readonly IProducer _producer ; public Service ( IProducer producer ) { _producer = producer ; } public async Task DoStuff () { ... await _producer . Produce ( new Test { AggregateId = \"aggregate-id\" }); ... } }","title":"Producer"},{"location":"producer/#producer","text":"Add Kafka producer configuration and outgoing messages: public class Startup { ... // This method gets called by the runtime. Use this method to add services to the container. public void ConfigureServices ( IServiceCollection services ) { // configure messaging: producer services . AddProducer ( options => { // configuration settings options . WithBootstrapServers ( \"http://localhost:9092\" ); // register outgoing messages (includes outbox messages) options . Register < Test >( \"test-topic\" , \"test-event\" , @event => @event . AggregateId ); }); } } Create a POCO representation of the Kafka message: public class Test { public string AggregateId { get ; set ; } } Take a dependency on IProducer and call the Produce method: public class Service { private readonly IProducer _producer ; public Service ( IProducer producer ) { _producer = producer ; } public async Task DoStuff () { ... await _producer . Produce ( new Test { AggregateId = \"aggregate-id\" }); ... } }","title":"Producer"}]}